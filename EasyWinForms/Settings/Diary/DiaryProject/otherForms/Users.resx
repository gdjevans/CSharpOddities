<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        iiHPKhERERERERERERERERERERERERERERERERERERERERERERERERERERERwaH/ASijfVGhyt79AAAA
        AElFTkSuQmCC
</value>
  </data>
</root>